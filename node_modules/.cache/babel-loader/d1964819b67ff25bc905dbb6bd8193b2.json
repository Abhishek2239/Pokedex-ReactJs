{"ast":null,"code":"var _jsxFileName = \"/media/abhishek/Partition 4/Courses/2.react/1React - The Complete Guide (incl Hooks, React Router, Redux)/practise/pokedex/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Pokecard from '../components/Pokecard/Pokecard';\nexport default class App extends Component {\n  componentWillMount() {\n    // Your parse code, but not seperated in a function\n    const csvFilePath = require(\"../assets/poke.csv\");\n\n    const Papa = require(\"papaparse/papaparse.min.js\");\n\n    Papa.parse(csvFilePath, {\n      header: true,\n      download: true,\n      skipEmptyLines: true,\n      // Here this is also available. So we can call our custom class method\n      complete: r => this.updateData(r)\n    });\n  }\n\n  updateData(result) {\n    // Here this is available and we can call this.setState (since it's binded in the constructor)\n    this.setState({\n      data: result.data\n    }); // or shorter ES syntax: this.setState({ data }); \n  }\n\n  render() {\n    const pokemons = this.state.data.map(item => {\n      return React.createElement(Pokecard, {\n        imgSrc: item.Img - Src,\n        name: item.Name,\n        id: item.ID,\n        abilities: item.Abilities,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, pokemons);\n  }\n\n}","map":{"version":3,"sources":["/media/abhishek/Partition 4/Courses/2.react/1React - The Complete Guide (incl Hooks, React Router, Redux)/practise/pokedex/src/containers/App.js"],"names":["React","Component","Pokecard","App","componentWillMount","csvFilePath","require","Papa","parse","header","download","skipEmptyLines","complete","r","updateData","result","setState","data","render","pokemons","state","map","item","Img","Src","Name","ID","Abilities"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,iCAArB;AAKA,eAAe,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAMzCG,EAAAA,kBAAkB,GAAG;AAEnB;AACA,UAAMC,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AACA,UAAMC,IAAI,GAAGD,OAAO,CAAC,4BAAD,CAApB;;AACAC,IAAAA,IAAI,CAACC,KAAL,CAAWH,WAAX,EAAwB;AACtBI,MAAAA,MAAM,EAAE,IADc;AAEtBC,MAAAA,QAAQ,EAAE,IAFY;AAGtBC,MAAAA,cAAc,EAAE,IAHM;AAItB;AACAC,MAAAA,QAAQ,EAAGC,CAAD,IAAK,KAAKC,UAAL,CAAgBD,CAAhB;AALO,KAAxB;AAOD;;AAEDC,EAAAA,UAAU,CAACC,MAAD,EAAS;AACjB;AACA,SAAKC,QAAL,CAAc;AAACC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAAd,KAAd,EAFiB,CAEmB;AAErC;;AAIDC,EAAAA,MAAM,GAAE;AACN,UAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWH,IAAX,CAAgBI,GAAhB,CAAqBC,IAAD,IAAQ;AAC3C,aAAO,oBAAC,QAAD;AACP,QAAA,MAAM,EAAIA,IAAI,CAACC,GAAL,GAASC,GADZ;AAEP,QAAA,IAAI,EAAIF,IAAI,CAACG,IAFN;AAGP,QAAA,EAAE,EAAIH,IAAI,CAACI,EAHJ;AAIP,QAAA,SAAS,EAAKJ,IAAI,CAACK,SAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAMD,KAPgB,CAAjB;AASF,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCR,QADD,CADF;AAKG;;AA3CsC","sourcesContent":["import React,{Component} from 'react';\nimport './App.css';\nimport Pokecard from '../components/Pokecard/Pokecard';\n\n\n\n\nexport default class App extends Component {\n\n  state: {\n    data : [],\n  } \n\n  componentWillMount() {\n\n    // Your parse code, but not seperated in a function\n    const csvFilePath = require(\"../assets/poke.csv\");\n    const Papa = require(\"papaparse/papaparse.min.js\");\n    Papa.parse(csvFilePath, {\n      header: true,\n      download: true,\n      skipEmptyLines: true,\n      // Here this is also available. So we can call our custom class method\n      complete: (r)=>this.updateData(r)\n    });\n  }\n\n  updateData(result) {\n    // Here this is available and we can call this.setState (since it's binded in the constructor)\n    this.setState({data: result.data}); // or shorter ES syntax: this.setState({ data }); \n    \n  }\n  \n\n  \n  render(){\n    const pokemons = this.state.data.map((item)=>{\n      return <Pokecard\n      imgSrc = {item.Img-Src}\n      name = {item.Name}\n      id = {item.ID}\n      abilities =  {item.Abilities}  \n      />\n    })\n    \n  return (\n    <div className=\"App\">\n    {pokemons}\n          \n    </div>\n  );}\n}\n\n\n"]},"metadata":{},"sourceType":"module"}