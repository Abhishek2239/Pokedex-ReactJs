{"ast":null,"code":"import _default5 from 'ramda/src/splitAt';\nimport _default4 from 'ramda/src/zipObj';\nimport _default3 from 'ramda/src/lift';\nimport _default2 from 'ramda/src/apply';\nimport _default from 'ramda/src/compose';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Papa from 'papaparse';\n\nvar CsvParse = function (_React$Component) {\n  _inherits(CsvParse, _React$Component);\n\n  function CsvParse() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, CsvParse);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleFile = function (event) {\n      var file = event.target.files[0];\n      var keys = _this.props.keys;\n      var onDataUploaded = _this.props.onDataUploaded;\n      var onError = _this.props.onError;\n      Papa.parse(file, {\n        skipEmptyLines: true,\n        error: function error(err, file, inputElem, reason) {\n          onError({\n            err: err,\n            file: file,\n            inputElem: inputElem,\n            reason: reason\n          });\n        },\n        complete: function complete(results) {\n          var data = results.data; // remove display headers\n\n          data.shift(); // add api headers\n\n          data.unshift(keys); // convert arrays to objects\n\n          var formatedResult = _default(_default2(_default3(_default4)), _default5(1))(data); // send result to state\n\n\n          onDataUploaded(formatedResult);\n        }\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  CsvParse.prototype.render = function render() {\n    return this.props.render(this.handleFile);\n  };\n\n  return CsvParse;\n}(React.Component);\n\nCsvParse.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  keys: PropTypes.array.isRequired,\n  onDataUploaded: PropTypes.func.isRequired,\n  onError: PropTypes.func\n} : {};\nexport default CsvParse;","map":null,"metadata":{},"sourceType":"module"}